import numpy as np
import tsplib95
import random
import matplotlib.pyplot as plt

# --------------------------------------------------------------------------
# 1. FUN√á√ïES AUXILIARES E DE C√ÅLCULO
# --------------------------------------------------------------------------

def calculate_total_distance(tour, distance_matrix):
    """Calcula a dist√¢ncia total de uma rota (tour)."""
    total_distance = 0
    num_cities = len(tour)
    for i in range(num_cities):
        # Pega a dist√¢ncia da cidade atual para a pr√≥xima
        # O operador % garante que a √∫ltima cidade se conecte √† primeira
        from_city = tour[i]
        to_city = tour[(i + 1) % num_cities]
        total_distance += distance_matrix[from_city][to_city]
    return total_distance

def get_distance_matrix(coords):
    """Cria uma matriz de dist√¢ncias a partir das coordenadas das cidades."""
    num_cities = len(coords)
    distance_matrix = np.zeros((num_cities, num_cities))
    for i in range(num_cities):
        for j in range(i, num_cities):
            # Coordenadas s√£o 1-based no tsplib, ajustamos para 0-based
            dist = np.linalg.norm(np.array(coords[i+1]) - np.array(coords[j+1]))
            distance_matrix[i][j] = distance_matrix[j][i] = dist
    return distance_matrix

# --------------------------------------------------------------------------
# 2. OPERADORES GEN√âTICOS
# --------------------------------------------------------------------------

def ordered_crossover(parent1, parent2):
    """
    Implementa o Ordered Crossover (OX1), eficaz para o PCV.
    Garante que a rota filha seja sempre v√°lida (sem cidades repetidas).
    """
    size = len(parent1)
    child = [-1] * size
    
    # Seleciona um trecho aleat√≥rio do primeiro pai
    start, end = sorted([random.randint(0, size - 1) for _ in range(2)])
    child[start:end+1] = parent1[start:end+1]
    
    # Preenche o restante com os genes do segundo pai, na ordem que aparecem
    pointer = (end + 1) % size
    for gene in parent2:
        if gene not in child:
            child[pointer] = gene
            pointer = (pointer + 1) % size
            
    return child

def swap_mutation(tour, mutation_rate):
    """
    Implementa a muta√ß√£o por troca (swap).
    Troca a posi√ß√£o de duas cidades aleat√≥rias na rota.
    """
    if random.random() < mutation_rate:
        idx1, idx2 = random.sample(range(len(tour)), 2)
        tour[idx1], tour[idx2] = tour[idx2], tour[idx1]
    return tour

# --------------------------------------------------------------------------
# 3. ESTRAT√âGIAS DE SELE√á√ÉO DE PAIS
# --------------------------------------------------------------------------

def tournament_selection(population, fitnesses, k=5):
    """
    Sele√ß√£o por Torneio: seleciona k indiv√≠duos e retorna o melhor deles.
    """
    # Seleciona k indiv√≠duos aleat√≥rios da popula√ß√£o
    selection_ix = np.random.randint(len(population), size=k)
    
    # Encontra o melhor entre os selecionados
    best_ix = -1
    best_fitness = -1
    for ix in selection_ix:
        if fitnesses[ix] > best_fitness:
            best_fitness = fitnesses[ix]
            best_ix = ix
            
    return population[best_ix]

def proportional_roulette_wheel_selection(population, fitnesses):
    """
    Sele√ß√£o por Roleta Proporcional: a chance de sele√ß√£o √© proporcional √† aptid√£o.
    """
    total_fitness = sum(fitnesses)
    if total_fitness == 0: # Evita divis√£o por zero se todas as fitness forem 0
        return random.choice(population)
        
    # Calcula as probabilidades de sele√ß√£o
    probabilities = [f / total_fitness for f in fitnesses]
    
    # Usa a fun√ß√£o `choice` do numpy que j√° implementa a l√≥gica da roleta
    selected_index = np.random.choice(len(population), p=probabilities)
    return population[selected_index]

def rank_based_roulette_wheel_selection(population, fitnesses):
    """
    Sele√ß√£o por Roleta Baseada em Rank: a chance de sele√ß√£o √© baseada no ranking.
    """
    # Ordena os √≠ndices da popula√ß√£o pela aptid√£o (do pior para o melhor)
    sorted_indices = np.argsort(fitnesses)
    
    # Cria os ranks (pior=1, melhor=N)
    ranks = np.empty_like(sorted_indices)
    ranks[sorted_indices] = np.arange(1, len(population) + 1)
    
    # Calcula a probabilidade baseada no rank
    total_rank = sum(ranks)
    probabilities = [r / total_rank for r in ranks]
    
    # Usa a fun√ß√£o `choice` com as probabilidades do rank
    selected_index = np.random.choice(len(population), p=probabilities)
    return population[selected_index]


# --------------------------------------------------------------------------
# 4. CLASSE PRINCIPAL DO ALGORITMO GEN√âTICO
# --------------------------------------------------------------------------

class GeneticAlgorithm:
    def __init__(self, cities_coords, pop_size=100, mutation_rate=0.01, crossover_rate=0.9, generations=500):
        self.pop_size = pop_size
        self.mutation_rate = mutation_rate
        self.crossover_rate = crossover_rate
        self.generations = generations
        self.distance_matrix = get_distance_matrix(cities_coords)
        self.num_cities = len(cities_coords)
        
        # Inicializa a popula√ß√£o com rotas aleat√≥rias
        self.population = self._create_initial_population()
        
    def _create_initial_population(self):
        population = []
        base_tour = list(range(self.num_cities))
        for _ in range(self.pop_size):
            tour = random.sample(base_tour, len(base_tour))
            population.append(tour)
        return population

    def run(self, selection_strategy):
        """Executa o ciclo do algoritmo gen√©tico."""
        best_overall_tour = None
        best_overall_distance = float('inf')
        history = []

        print(f"Executando com a estrat√©gia: {selection_strategy.__name__}")

        for gen in range(self.generations):
            # 1. Avalia√ß√£o (Fitness)
            # Fitness √© o inverso da dist√¢ncia (maior √© melhor)
            distances = [calculate_total_distance(tour, self.distance_matrix) for tour in self.population]
            fitnesses = [1 / d for d in distances]
            
            # 2. Guarda o melhor resultado da gera√ß√£o
            best_current_distance = min(distances)
            if best_current_distance < best_overall_distance:
                best_overall_distance = best_current_distance
                best_overall_tour = self.population[np.argmin(distances)]
            
            history.append(best_overall_distance)

            # Imprime o progresso
            if (gen + 1) % 50 == 0:
                print(f"> Gera√ß√£o {gen+1}/{self.generations}, Melhor Dist√¢ncia: {best_overall_distance:.2f}")

            # 3. Sele√ß√£o e Reprodu√ß√£o
            new_population = []
            for _ in range(self.pop_size // 2):
                # Seleciona os pais usando a ESTRAT√âGIA FORNECIDA
                parent1 = selection_strategy(self.population, fitnesses)
                parent2 = selection_strategy(self.population, fitnesses)
                
                # Crossover
                if random.random() < self.crossover_rate:
                    child1 = ordered_crossover(parent1, parent2)
                    child2 = ordered_crossover(parent2, parent1)
                else:
                    child1, child2 = parent1, parent2
                
                # Muta√ß√£o
                child1 = swap_mutation(child1, self.mutation_rate)
                child2 = swap_mutation(child2, self.mutation_rate)
                
                new_population.extend([child1, child2])
            
            self.population = new_population
            
        return best_overall_tour, best_overall_distance, history

# --------------------------------------------------------------------------
# 5. BLOCO DE EXECU√á√ÉO DO EXPERIMENTO
# --------------------------------------------------------------------------
if __name__ == '__main__':
    # Carrega um problema da TSPLIB (usado no artigo)
    # üß† Voc√™ pode trocar 'eil51' por 'berlin52', 'att48', etc.
    problem = tsplib95.load('att48.tsp')
    cities_coords = problem.node_coords
    best_solution = {"att48": 10628, "berlin52": 7542, "eil51": 426, "pr76": 108159}
    print(f"Problema: {problem.name}, Cidades: {len(cities_coords)}")
    
    # Tenta obter a solu√ß√£o √≥tima do problema, se n√£o, usa nosso dicion√°rio
    try:
        best_known = problem.get_best_known()
    except Exception:
        best_known = best_solution.get(problem.name, 'N√£o dispon√≠vel')
        
    print(f"Solu√ß√£o √≥tima conhecida: {best_known}")
    print("-" * 30)

    # Par√¢metros do AG
    POP_SIZE = 150
    GENERATIONS = 500
    MUTATION_RATE = 0.0017
    CROSSOVER_RATE = 0.9541
    
    # Lista das estrat√©gias de sele√ß√£o a serem testadas
    selection_strategies = [
        tournament_selection,
        proportional_roulette_wheel_selection,
        rank_based_roulette_wheel_selection
    ]
    
    results_history = {}

    # Executa o AG para cada estrat√©gia
    for strategy in selection_strategies:
        ga = GeneticAlgorithm(cities_coords, pop_size=POP_SIZE, generations=GENERATIONS, mutation_rate=MUTATION_RATE, crossover_rate=CROSSOVER_RATE)
        best_tour, best_dist, history = ga.run(selection_strategy=strategy)
        
        strategy_name = strategy.__name__.replace("_selection", "").replace("_", " ").title()
        results_history[strategy_name] = history
        
        print(f"\nMelhor resultado para '{strategy_name}':")
        print(f"  Dist√¢ncia: {best_dist:.2f}")
        # print(f"  Rota: {best_tour}") # Descomente para ver a rota
        print("-" * 30)
        
    # Plotando os resultados
    plt.figure(figsize=(12, 7))
    for name, history in results_history.items():
        plt.plot(history, label=name)
        
    plt.title(f'Compara√ß√£o das Estrat√©gias de Sele√ß√£o para o Problema "{problem.name}"')
    plt.xlabel('Gera√ß√£o')
    plt.ylabel('Melhor Dist√¢ncia Encontrada')
    
    # Adiciona a linha da solu√ß√£o √≥tima, se dispon√≠vel
    if isinstance(best_known, (int, float)):
        plt.axhline(y=best_known, color='r', linestyle='--', label=f'√ìtimo Conhecido ({best_known})')
        
    plt.legend()
    plt.grid(True)
    plt.show()